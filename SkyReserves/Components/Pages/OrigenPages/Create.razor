@page "/Origen/Create"
@inject OrigenService origenService
@inject NavigationManager navigation
@rendermode InteractiveServer
@inject ToastService Toast
<link rel="stylesheet" href="/Style/Origen/Origen.css" />

<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />

<PageTitle>Crear Vuelo de Origen</PageTitle>

<EditForm Model="Origen" OnValidSubmit="Crear" FormName="crearOrigenForm">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5><strong>Crear Vuelo de Origen</strong></h5>
            </div>
            <div class="card-body">

                <!-- Origen ID -->
                <div class="mb-3">
                    <label for="OrigenId" class="form-label"><strong>Origen ID</strong></label>
                    <InputNumber id="OrigenId" class="form-control" @bind-Value="Origen.OrigenId" readonly />
                </div>

                <!-- Origen del Vuelo -->
                <div class="mb-3">
                    <label for="origen" class="form-label"><strong>Origen del Vuelo</strong></label>
                    <InputText id="origen" class="form-control" @bind-Value="Origen.origen" />
                    <ValidationMessage For="@(() => Origen.origen)" />
                </div>

            </div>

            <div class="card-footer">
                <button type="button" class="btn btn-info text-white bi bi-arrow-90deg-left" @onclick="Volver">Volver</button>
                <button type="submit" class="btn btn-success text-white bi bi-floppy-fill"> Crear</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Origen Origen { get; set; } = new Origen();
    public List<Origen> origenList { get; set; } = new List<Origen>();
    public string Mensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        origenList = await origenService.Listar(c => c.OrigenId > 0);
    }

    public async Task<bool> Validar()
    {
        var origenExiste = await origenService.BuscarOrigen(Origen.origen);
        if (origenExiste != null)
        {
            Toast.Notify(new(ToastType.Warning, "Error al crear el origen de vuelo", "Este origen ya existe!"));
            return false;
        }

        return true;
    }

    public async Task Crear()
    {
        if (await Validar())
        {
            Toast.Notify(new(ToastType.Success, "Origen de vuelo Guardado", "El origen de vuelo se ha guardado con exito!"));
            await origenService.Guardar(Origen);
            await Task.Delay(4000);
            Origen = new Origen();
            navigation.NavigateTo("/Origen/Index");
        }
    }

    public void Volver()
    {
        navigation.NavigateTo("/Origen/Index");
    }
}
