@page "/Accesibilidad/Create"
@rendermode InteractiveServer
@inject AccesibilidadService accesibilidadService
@inject NavigationManager navigation
@inject ToastService Toast
<link rel="stylesheet" href="/Style/Accesibilidad.css" />
<link rel="stylesheet" href="/Estilos/Toast.css" />


<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />

<PageTitle>Crear Accesibilidad</PageTitle>

<EditForm Model="Accesibilidad" OnValidSubmit="Crear">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title"><strong>Crear Accesibilidad</strong></h5>
            </div>
            <div class="card-body">

                <!-- Accesibilidad ID -->
                <div class="mb-3">
                    <label for="AccesibilidadId" class="form-label"><strong>Accesibilidad ID</strong></label>
                    <InputNumber class="form-control" @bind-Value="Accesibilidad.AccesibilidadId" readonly />
                </div>

                <!-- Descripción -->
                <div class="mb-3">
                    <label for="Descripcion" class="form-label"><strong>Descripción</strong></label>
                    <InputText class="form-control" @bind-Value="Accesibilidad.Descripcion" />
                    <ValidationMessage For="@(() => Accesibilidad.Descripcion)" />
                </div>

            </div>

            <div class="card-footer">
                <button type="button" class="btn btn-secondary text-white bi bi-arrow-90deg-left" @onclick="Volver">Volver</button>
                <button type="submit" class="btn btn-success text-white bi bi-floppy-fill"> Crear</button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    public Accesibilidad Accesibilidad { get; set; } = new Accesibilidad();
    public List<Accesibilidad> accesibilidadList { get; set; } = new List<Accesibilidad>();
    public string Mensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        accesibilidadList = await accesibilidadService.Listar(o => o.AccesibilidadId > 0);
    }

    public async Task<bool> Validar()
    {
        var accesibilidadExiste = await accesibilidadService.BuscarAccesibilidad(Accesibilidad.Descripcion);
        if (accesibilidadExiste != null)
        {
            Toast.Notify(new(ToastType.Warning, "Error al crear la accesibilidad", "Esta accesibilidad ya existe!"));
            return false;
        }

        return true;
    }

    public async Task Crear()
    {
        if (await Validar())
        {
            Toast.Notify(new(ToastType.Success, "Accesibilidad Guardada", "La accesibilidad se ha guardado con éxito!"));
            await accesibilidadService.Guardar(Accesibilidad);
            await Task.Delay(4000);
            Accesibilidad = new Accesibilidad();
            navigation.NavigateTo("/Accesibilidad/Index");
        }
    }

    public void Volver()
    {
        navigation.NavigateTo("/Accesibilidad/Index");
    }

}
